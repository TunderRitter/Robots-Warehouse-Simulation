name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        run: echo | dotnet --version
      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install bc -y
      - name: Restore and Build
        run: |
          dotnet restore
          dotnet build
      - name: Echo Build Success
        run: echo "Build success"

  test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        run: echo | dotnet --version
      - name: Install Dependencies
        run: |
          sudo apt-get update -yqq
          sudo apt-get install -yqq bc
      - name: Install and Run Tests
        run: |
          dotnet restore Warehouse_Simulation_Tests --packages .nuget
          dotnet test Warehouse_Simulation_Tests --no-restore --logger:"junit;LogFilePath=../junit/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" --collect="XPlat Code Coverage"
      - name: Generate Coverage Report
        run: |
          dotnet tool install --tool-path . dotnet-reportgenerator-globaltool
          ./reportgenerator "-reports:$GITHUB_WORKSPACE/*/TestResults/*/coverage.cobertura.xml" "-targetdir:report" "-reporttypes:Cobertura"
      - name: Calculate Coverage
        run: |
          line_rate=$(head -n 3 ./report/Cobertura.xml | sed 'N;N;s/.*line-rate="\([^" ]*\).*/\1/g')
          coverage=$(echo "${line_rate} * 189" | bc)
          printf "TOTAL_COVERAGE=%2.2f\n" "$coverage"
      - name: Upload Coverage and Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            ./junit/*test-result.xml
            ./*/TestResults/*/coverage.cobertura.xml

  deploy:
    name: Generate Documentation
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v3
      - name: Install Documentation Tools
        run: |
          sudo apt-get update -yqq
          sudo apt-get install -yqq doxygen graphviz
      - name: Generate Documentation
        run: doxygen
      - name: Deploy Documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: public

  release:
    name: Release
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v3
      - name: Publish Application
        run: |
          dotnet publish ./Warehouse_Simulation.sln -o ./Release --runtime win-x64 --configuration Release --sc true -p:PublishProfile=PublishSingleFile -p:UseAppHost=true
          echo "Publish success"
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: ./Release
